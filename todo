TODO

To meet reqs as simple text editor:
    [ ] implement search: (2 forms: select all matching instances then edit normally, or vs code style find/replace)
        [ ] incremental search
            - would need to store selections previous to search, in case user exits search mode(need to figure out where to store this...)
            - then search any time input text is edited in util bar
        [ ] regex
        [x] input text selected within whole document(selections can then be edited all at once)
            [ ] search case insensitively?
        [ ] input text selected only within already selected text(selections can then be edited all at once)
        [x] may also want to impl a way to remove the current primary selection(like when searching all at once and without regex)
            - this allows for removing matched instances of input text that you don't want to be edited
    [ ] suggestions from words already in doc
    [ ] render interactive_text_box selections(find/replace, goto, command, etc.)
    [x] merge overlapping selections. (selection extension fns should all do this. prob in core)
    [ ] move/extend/delete to word boundaries(need good definition for word boundaries)
    [ ] move view
        [x] by specified amount, up until doc boundaries
        [ ] to doc boundaries in one keypress(example: alt+home for left boundary, alt+end for right boundary, alt+pg_up for top boundary, alt+pg_down for bottom boundary)
    [ ] move selected line/lines up or down in document(alt+up/alt+down in vs code)
    [x] selection copied indicator
    [ ] cursor/selections should prob not render in all modes...
    [ ] system wide cut/copy/paste
    [ ] add lib.rs. move code into lib.rs except main. unit test library
    [x] add status bar widget for number of selections(1/1 = primary cursor is the only one, 3/125 = primary cursor is the 3rd selection of 125)
    [ ] cursor line/cursor column highlighting(with user defined colors in config.rs)
    [ ] loading indicator on save/open/big edits like undoing a deletion of the whole text

To meet reqs as code editor:
    [ ] auto indent
    [ ] colorize syntax/etc.(treesitter)
    [ ] debug adapter protocol
    [ ] display completion suggestions from lsp
    [ ] move/extend/delete to code textobject boundaries from lsp



always ensure:
    any input from the user should result in some visual response being displayed. never should a user action result in no change...
    user should be able to negate this by removing code that triggers warning mode in each action fn called, or a config flag

