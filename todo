TODO

To meet reqs as simple text editor:
    [ ] implement core behavior and test
        - consider implications of underlying data structure
            array of lines
            rope
            gap buffer
            others?
        [x] move within doc boundaries + 1 past doc end, so new text can be inserted
            - impl first with single cursor/selection, then with multi cursor/selections  (merge overlapping cursors)
            - impl with bar and block cursor semantics
            [x] up
            [x] down
            [x] left
            [x] right
            [x] home
                [x] line start
                [x] line text start
            [x] line text end
            [x] right word boundary
            [x] left word boundary
            [x] page up
            [x] page down
            [x] doc start
            [x] doc end + 1 past doc end, so new text can be inserted
            - ensure behavior
                - cursor should never move further right visually than line end + newline char
                - restrict cursor to document start/end
                - cursor left at line start moves to previous line end if available
                - cursor right at line end moves to next line start if available
                - make cursor maintain horizontal position or go to line end when moving up/down
        [x] extend selections within doc boundaries
            - impl first with single cursor/selection, then with multi cursor/selection   (merge overlapping cursors/selections)
            - impl with bar and block cursor semantics
            [x] up
            [x] down
            [x] left
            [x] right
            [x] home
                [x] line start
                [x] line text start
            [x] line text end
            [x] right word boundary
            [x] left word boundary
            [x] page up
            [x] page down
            [x] doc start
            [x] doc end
            - ensure behavior
                extensions should never go past document boundaries
                other...
        [ ] selection management
            [x] add selection
                [x] above
                [x] below
            [x] remove primary selection    - this allows for removing matched instances of search text that you don't want to be edited, or removing selection added above/below where they don't need to be edited
            [x] increment primary selection index
            [x] decrement primary selection index
            [ ] match search text
                [x] case sensitive
                [ ] case insensitive
                [x] regex
                [x] incremental search  (would have to store selections prior to search, in case search is aborted)
                [ ] within whole document
                [x] within already selected text(single or multi)
            [ ] split selection(s?) at specified character(single or multi)
                //example "fn something(input1: usize, input2: usize)"
                    select inside parens    "fn something([input1: usize, input2: usize])"
                    split on ','            "fn something([input1: usize], [input2: usize])"
        [x] editing functionality(first on single selections then multi selections)
            [x] insert
                [x] text
                [x] newlines
                    [ ] auto-indent?...for text editor, maybe just match previous line's indentation?
                [ ] tabs
                    [x] soft tabs(insert set number of spaces)
                    [ ] hard tabs('\t')
            [x] remove
                [x] delete
                    [x] single grapheme
                    [x] whole selection
                [x] backspace
                    [x] single grapheme
                    [x] whole selection
            [x] replace
            [x] cut/copy/paste(impl in editor only, then use system tools to allow system wide)
            [x] history
                [x] undo
                [x] redo
            [x] impl save functionality

    [ ] impl frontend behavior
        [x] set up as document viewer with no scrolling or resizing
            [x] add ability to close editor/document
        [x] set up as document viewer with resizing
        [x] set up as document viewer with movement/selection extension within static view
            [x] render selections
        [x] set up as document viewer with scrolling attached to cursor position
        [x] set up as document viewer with scrolling detached from cursor position
            [x] view scroll(this will be implemented in core and called from front end)
                [x] up
                [x] down
                [x] left
                [x] right
        [ ] set up UI elements
            [ ] document viewport
                [x] document text
                [x] toggleable line numbers
                [ ] highlighter
                    [x] selections
                    [x] cursors
                    [x] cursor line(highlight the line that the cursor is on)
                    [x] cursor column(highlight the column that the cursor is on)
                    [ ] syntax
                [ ] scroll bar (proportional to buffer len lines, and view size)
            [ ] status bar
                [x] file name (not applicable to temp buffer)
                [x] modified indicator
                [x] mode indicator
                [x] add status bar widget for number of selections(1/1 = primary cursor is the only one, 3/125 = primary cursor is the 3rd selection of 125)
                [ ] loading indicator on save/open/big edits like undoing a deletion of the whole text
            [x] util bar
                [x] render interactive_text_box text + handle movement/selection extension
                [x] render interactive_text_box selections(find/replace, goto, command, etc.)
                [x] warning mode
                [x] selection copied indicator
            [ ] popups
                [x] available editor actions(space mode, goto, add_surround, object, etc)
                [ ] completion suggestions from words already in doc





To meet reqs as code editor:
    [ ] auto indent
    [ ] colorize syntax/etc.(treesitter)
    [ ] debug adapter protocol
    [ ] display completion suggestions from lsp
    [ ] move/extend/delete to code textobject boundaries from lsp




future goals:
    client/server, so single backend instance can process multiple frontend applications
    selection history(undo/redo but for selection movement instead of text edited)



always ensure:
    any input from the user should result in some visual response being displayed. never should a user action result in no change...
    user should be able to negate this by removing code that triggers warning mode in each action fn called, or a config flag
    (there are some instances where visual feedback may not be possible/reasonable)
        like when multiple cursors are moved, but the movement happens outside view. idk what would be a reasonable visual cue that the editor has properly responded to input here



bug fix:
    [ ] extend selection word boundary forward/backward aren't behaving correctly in certain scenarios
    [x] util_bar interactive text box cursor goes wonky when text inserted past util_bar width      documented at util_bar.rs:141:73
    [ ] util_bar interactive text box selection gets stuck if extended left from end of line, and try to extend selection right
        //same happens in document when extended left from buffer end...
    [ ] when status bar hidden, with cursor at bottom buffer line in view, if find/split mode(but not goto/command) entered, then exited, the view is moved down
        one line, when it should remain the same...
    [ ] when upward extended selection from line end extended back down, the resultant selection is wrong
        put cursor at end of long line, over new line grapheme
        extend selection up
        extend selection back down
        selection in incorrect state
        //this seems to be related to shifting the selection so it cannot encompass the newline
    [ ] with selection extended to line end(cursor over newline), and move cursor line end called, the selection should be collapsed, not return a same state error
    [ ] add selection above/below only copies the primary selection, not any other selections on the same line as primary


other:
    make <enter> the way to exit find mode with matched selections, instead of <esc>
    make <enter> the way to exit split mode with split selections, instead of <esc>

    combine status bar and util bar

    make undo/redo work with several subsequent grapheme insertions/deletions, not just single insertion/deletion. (undo/redo typed words)

    if file is read only, don't allow edit actions to modify the buffer. selection actions and others should still work...
